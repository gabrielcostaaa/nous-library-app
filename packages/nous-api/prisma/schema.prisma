generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum LoanStatus {
  ACTIVE // Emprestado, dentro do prazo
  OVERDUE // Atrasado
  RETURNED // Devolvido
}

model User {
  id        String   @id @default(uuid()) @map("usr_id")
  name      String   @map("usr_name")
  email     String   @unique @map("usr_email")
  password  String   @map("usr_password")
  role      Role     @default(USER) @map("usr_role")
  createdAt DateTime @default(now()) @map("usr_created_at")
  updatedAt DateTime @updatedAt @map("usr_updated_at")

  loans Loan[]

  @@map("users")
}

model Book {
  id        String   @id @default(uuid()) @map("bok_id")
  title     String   @map("bok_title")
  author    String   @map("bok_author")
  basePrice Float    @map("bok_base_price")
  createdAt DateTime @default(now()) @map("bok_created_at")
  updatedAt DateTime @updatedAt @map("bok_updated_at")

  loans Loan[]

  @@map("books")
}

model Loan {
  id                  String     @id @default(uuid()) @map("lon_id")
  userId              String     @map("lon_usr_id")
  bookId              String     @map("lon_bok_id")
  loanDate            DateTime   @default(now()) @map("lon_loan_date")
  dueDate             DateTime   @map("lon_due_date")
  returnDate          DateTime?  @map("lon_return_date")
  status              LoanStatus @default(ACTIVE) @map("lon_status")
  fineDiscountApplied Boolean    @default(false) @map("lon_fine_discount_applied")

  createdAt DateTime @default(now()) @map("lon_created_at")
  updatedAt DateTime @updatedAt @map("lon_updated_at")

  user User @relation(fields: [userId], references: [id])
  book Book @relation(fields: [bookId], references: [id])

  @@map("loans")
}
